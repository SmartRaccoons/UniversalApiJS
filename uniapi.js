// Generated by CoffeeScript 1.8.0
(function() {
  var GET, Order, UniversalApi, add_script, loadJSONP, _GET;

  Order = (function() {
    function Order() {
      this._buffer = [];
      this._last = 0;
    }

    Order.prototype._execute = function() {
      var diff;
      if (this._buffer.length === 0) {
        return;
      }
      diff = this._last + this._buffer[0].delay - (new Date()).getTime();
      if (diff > 0) {
        return setTimeout((function(_this) {
          return function() {
            return _this._execute();
          };
        })(this), diff);
      }
      this._buffer.shift().fn();
      this._last = (new Date()).getTime();
      return this._execute();
    };

    Order.prototype.next = function(fn, delay) {
      if (delay == null) {
        delay = 0;
      }
      this._buffer.push({
        'fn': fn,
        'delay': delay
      });
      return this._execute();
    };

    return Order;

  })();

  GET = (function(a) {
    var b, p, pr, _i, _len;
    b = {};
    if (a === '') {
      return b;
    }
    for (_i = 0, _len = a.length; _i < _len; _i++) {
      pr = a[_i];
      p = pr.split('=');
      if (p.length === 2) {
        b[p[0]] = decodeURIComponent(p[1].replace(/\+/g, " "));
      }
    }
    return b;
  })(window.location.search.substr(1).split('&'));

  add_script = function(url, callback) {
    var script;
    if (callback == null) {
      callback = function() {};
    }
    script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = url;
    callback(script);
    return document.getElementsByTagName('head')[0].appendChild(script);
  };

  loadJSONP = (function() {
    var unique;
    unique = 0;
    return function(url, callback, context) {
      var name;
      name = '_jsonp_' + unique++;
      if (url.match(/\?/)) {
        url += '&callback=' + name;
      } else {
        url += '?callback=' + name;
      }
      return add_script(url, (function(_this) {
        return function(script) {
          return window[name] = function(data) {
            callback.call(context || window, data);
            document.getElementsByTagName('head')[0].removeChild(script);
            script = null;
            return delete window[name];
          };
        };
      })(this));
    };
  })();

  _GET = function(p) {
    if (p in GET) {
      return GET[p];
    }
    return false;
  };

  window.UniversalApi = UniversalApi = (function() {
    UniversalApi.prototype._order = new Order();

    function UniversalApi(params) {
      this._url_params = params;
      this.options = {
        url: params.url
      };
      delete params.url;
      if (_GET('dr_auth_code')) {
        add_script('//ifrype.com/applications/external/draugiem.js');
        this._media = 'draugiem';
        this._url_params['dr_auth_code'] = _GET('dr_auth_code');
      }
    }

    UniversalApi.prototype._url = function(additional) {
      var k, url, v, _ref;
      if (additional == null) {
        additional = {};
      }
      url = [];
      _ref = this._url_params;
      for (k in _ref) {
        v = _ref[k];
        url.push("" + k + "=" + (decodeURIComponent(v)));
      }
      for (k in additional) {
        v = additional[k];
        url.push("" + k + "=" + (decodeURIComponent(v)));
      }
      return url.join('&');
    };

    UniversalApi.prototype.authorize = function(callback) {
      return this._request(callback);
    };

    UniversalApi.prototype.session = function() {
      return this._url_params.session;
    };

    UniversalApi.prototype.share = function(options, callback) {
      if (callback == null) {
        callback = function() {};
      }
      if (this._media === 'draugiem') {
        return draugiemSay(options.title, options.url, '', options.text, callback);
      }
    };

    UniversalApi.prototype.get = function(k) {
      if (this.user) {
        return this.user.data[k];
      } else {
        return false;
      }
    };

    UniversalApi.prototype.save = function(ob, callback) {
      var additional, k, v;
      if (callback == null) {
        callback = function() {};
      }
      additional = {};
      for (k in ob) {
        v = ob[k];
        additional["data." + k] = v;
      }
      return this._request(callback, additional);
    };

    UniversalApi.prototype._request = function(callback, additional) {
      if (additional == null) {
        additional = {};
      }
      return this._order.next((function(_this) {
        return function() {
          return loadJSONP("" + _this.options.url + "?" + (_this._url(additional)), function(data) {
            if (data.session) {
              _this._url_params['session'] = data.session;
              _this.user = data;
            }
            return callback(data);
          });
        };
      })(this));
    };

    return UniversalApi;

  })();

}).call(this);
